// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot-climate-arduino.proto

/*
Package _iotClimateArduinoService is a generated protocol buffer package.

It is generated from these files:
	iot-climate-arduino.proto

It has these top-level messages:
	ArduinoRequest
	TemperatureResponse
*/
package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArduinoRequest struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *ArduinoRequest) Reset()                    { *m = ArduinoRequest{} }
func (m *ArduinoRequest) String() string            { return proto.CompactTextString(m) }
func (*ArduinoRequest) ProtoMessage()               {}
func (*ArduinoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ArduinoRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ArduinoRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type TemperatureResponse struct {
	Temperature float32 `protobuf:"fixed32,1,opt,name=temperature" json:"temperature,omitempty"`
}

func (m *TemperatureResponse) Reset()                    { *m = TemperatureResponse{} }
func (m *TemperatureResponse) String() string            { return proto.CompactTextString(m) }
func (*TemperatureResponse) ProtoMessage()               {}
func (*TemperatureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TemperatureResponse) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterType((*ArduinoRequest)(nil), "com.avegao.iot.climate.arduino.ArduinoRequest")
	proto.RegisterType((*TemperatureResponse)(nil), "com.avegao.iot.climate.arduino.TemperatureResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Arduino service

type ArduinoClient interface {
	GetTemperature(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*TemperatureResponse, error)
}

type arduinoClient struct {
	cc *grpc.ClientConn
}

func NewArduinoClient(cc *grpc.ClientConn) ArduinoClient {
	return &arduinoClient{cc}
}

func (c *arduinoClient) GetTemperature(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*TemperatureResponse, error) {
	out := new(TemperatureResponse)
	err := grpc.Invoke(ctx, "/com.avegao.iot.climate.arduino.Arduino/GetTemperature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Arduino service

type ArduinoServer interface {
	GetTemperature(context.Context, *ArduinoRequest) (*TemperatureResponse, error)
}

func RegisterArduinoServer(s *grpc.Server, srv ArduinoServer) {
	s.RegisterService(&_Arduino_serviceDesc, srv)
}

func _Arduino_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArduinoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArduinoServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.avegao.iot.climate.arduino.Arduino/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArduinoServer).GetTemperature(ctx, req.(*ArduinoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arduino_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.avegao.iot.climate.arduino.Arduino",
	HandlerType: (*ArduinoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemperature",
			Handler:    _Arduino_GetTemperature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot-climate-arduino.proto",
}

func init() { proto.RegisterFile("iot-climate-arduino.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0xcc, 0x2f, 0xd1,
	0x4d, 0xce, 0xc9, 0xcc, 0x4d, 0x2c, 0x49, 0xd5, 0x4d, 0x2c, 0x4a, 0x29, 0xcd, 0xcc, 0xcb, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4b, 0xce, 0xcf, 0xd5, 0x4b, 0x2c, 0x4b, 0x4d, 0x4f,
	0xcc, 0xd7, 0xcb, 0xcc, 0x2f, 0xd1, 0x83, 0xaa, 0xd2, 0x83, 0xaa, 0x52, 0xb2, 0xe0, 0xe2, 0x73,
	0x84, 0x30, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0x32, 0xf2, 0x8b,
	0x4b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x90, 0x58, 0x41, 0x7e, 0x51, 0x89,
	0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x98, 0xad, 0x64, 0xce, 0x25, 0x1c, 0x92, 0x9a, 0x5b,
	0x90, 0x5a, 0x94, 0x58, 0x52, 0x5a, 0x94, 0x1a, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a,
	0xa4, 0xc0, 0xc5, 0x5d, 0x82, 0x10, 0x06, 0x9b, 0xc2, 0x14, 0x84, 0x2c, 0x64, 0xd4, 0xc0, 0xc8,
	0xc5, 0x0e, 0xb5, 0x53, 0xa8, 0x94, 0x8b, 0xcf, 0x3d, 0xb5, 0x04, 0xc9, 0x1c, 0x21, 0x3d, 0x3d,
	0xfc, 0x2e, 0xd6, 0x43, 0x75, 0xae, 0x94, 0x31, 0x21, 0xf5, 0x58, 0x1c, 0xe9, 0xd4, 0xca, 0xc8,
	0x45, 0x20, 0x60, 0x9c, 0xc4, 0x3c, 0xf3, 0x4b, 0x9c, 0x21, 0x62, 0x50, 0x1b, 0x03, 0x40, 0x01,
	0x1a, 0xe5, 0x9a, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0x04, 0xb2, 0x55, 0x1f, 0xa2, 0x5d, 0x1f, 0x4b,
	0xe8, 0xeb, 0x83, 0x43, 0xdf, 0x1a, 0x24, 0x85, 0x6a, 0x48, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72,
	0xea, 0x22, 0x26, 0x66, 0x4f, 0x67, 0xc7, 0x24, 0x36, 0xb0, 0x32, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x71, 0x00, 0x93, 0x45, 0xc1, 0x01, 0x00, 0x00,
}
